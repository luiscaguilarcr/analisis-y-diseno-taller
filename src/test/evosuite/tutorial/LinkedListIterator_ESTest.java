/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 17 02:56:21 GMT 2021
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tutorial.LinkedListIterator;
import tutorial.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedListIterator_ESTest extends LinkedListIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Node<Object> node0 = new Node<Object>((Object) null);
      LinkedListIterator<Object> linkedListIterator0 = new LinkedListIterator<Object>(node0);
      Object object0 = linkedListIterator0.next();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-3167));
      Node<Integer> node0 = new Node<Integer>(integer0);
      LinkedListIterator<Integer> linkedListIterator0 = new LinkedListIterator<Integer>(node0);
      boolean boolean0 = linkedListIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Node<String> node0 = new Node<String>("#");
      LinkedListIterator<String> linkedListIterator0 = new LinkedListIterator<String>(node0);
      linkedListIterator0.next();
      // Undeclared exception!
      try { 
        linkedListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedListIterator<Integer> linkedListIterator0 = new LinkedListIterator<Integer>((Node<Integer>) null);
      boolean boolean0 = linkedListIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedListIterator<Integer> linkedListIterator0 = new LinkedListIterator<Integer>((Node<Integer>) null);
      // Undeclared exception!
      try { 
        linkedListIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("tutorial.LinkedListIterator", e);
      }
  }
}
